/*
	v3.0.0
	https://github.com/FrostSource/alyxlib
*/
{
	"Entity Base":{
		"scope": "lua",
		"prefix": ["Entity Base", "Base Entity", "Class Script"],
		"body": [
			"if thisEntity then",
			"\t-- Inherit this script if attached to entity",
			"\t-- Will also load the script at the same time if needed",
			"\tinherit(GetScriptFile())",
			"\treturn",
			"end",
			"",
			"---@class ${1:EntityName} : EntityClass",
			"local base = entity(\"${1:EntityName}\")",
			"",
			"$0",
			"",
			"---Called automatically on spawn",
			"---@param spawnkeys CScriptKeyValues",
			"function base:OnSpawn(spawnkeys)",
			"end",
			"",
			"---Called automatically after OnActivate, when EasyConvars and Player have initialized.",
			"---@param readyType OnReadyType",
			"function base:OnReady(readyType)",
			"end",
			"",
			"---Main entity think function. Think state is saved between loads",
			"function base:Think()",
			"\treturn 0",
			"end",
			"",
			"--Used for classes not attached directly to entities",
			"return base",
		],
		"description": "Code that most entity scripts should start with.",
		"isFileTemplate": true
	},

	"Entity Class Game Event":{
		"scope": "lua",
		"prefix": ["Game Event"],
		"body": [
			"---@param params GAME_EVENT_$2",
			"base:GameEvent(${1:\"event\"}, function(self, params)",
			"\t---@cast self ${3:ClassName}",
			"",
			"\t$0",
			"end)"
		],
		"description": "Quick templating an entity class game event."
	},

	"Entity Class Player Event":{
		"scope": "lua",
		"prefix": ["Player Event"],
		"body": [
			"---@param params PLAYER_EVENT_$2",
			"base:PlayerEvent(${1:\"event\"}, function(self, params)",
			"\t---@cast self ${3:ClassName}",
			"",
			"\t$0",
			"end)"
		],
		"description": "Quick templating an entity class game event."
	},

	"Add Locals To Script Scope":{
		"scope": "lua",
		"prefix": ["Add locals to script scope", "localfix"],
		"body": [
			"-- Add local functions to private script scope to avoid environment pollution.",
			"local _a,_b=1,thisEntity:GetPrivateScriptScope()while true do local _c,_d=debug.getlocal(1,_a)if _c==nil then break end;if type(_d)=='function'then _b[_c]=_d end;_a=1+_a end",
		],
		"description": "Adds local functions to private script scope to avoid environment pollution."
	},

	"Expose - Private":{
		"scope": "lua",
		"prefix": ["Expose (private)"],
		"body": [
			"thisEntity:GetPrivateScriptScope().${1:func} = ${1:func}"
		],
		"description": "Exposes a single local function to Hammer."
	},

	"Stop Second Execute":{
		"scope": "lua",
		"prefix": ["Stop second execute", "Fix second execute"],
		"body": [
			"if thisEntity then if thisEntity:GetPrivateScriptScope().__load then return else thisEntity:GetPrivateScriptScope().__load = true end else return end"
		],
		"description": "Stops the script from executing a second time when the game loads. Place at the top of the script."
	},


	"Panorama XML Template":{
		"scope": "xml",
		"prefix": ["Panorama XML"],
		"body":[
			"<root>",
			"\t<styles>",
			"\t\t<include src=\"s2r://panorama/styles/base_styles.vcss_c\" />",
			"\t\t<include src=\"s2r://panorama/styles/language_shared.vcss_c\" />",
			"\t\t<include src=\"s2r://panorama/styles/custom_game/${1:my_styles}.vcss_c\" />",
			"\t</styles>",
			"",
			"\t<scripts>",
			"\t\t<include src=\"s2r://panorama/scripts/custom_game/panorama_lua.vjs_c\" />",
			"\t\t<!--Custom script should come after panorama_lua-->",
			"\t\t<include src=\"s2r://panorama/scripts/custom_game/${2:my_script}.vjs_c\" />",
			"\t</scripts>",
			"",
			"\t<Panel class=\"root\">",
			"\t\t$0",
			"\t</Panel>",
			"</root>",

		]
	},

	"Panorama JS Template":{
		"scope": "js,javascript",
		"prefix": ["Panorama JS", "Panorama JavaScript"],
		"body":[
			"\"use strict\";",
			"// Used to import panorama typedefs",
			"if(false)p=require(\"./panoramadoc\");",
			"",
			"/**",
			" * Parses a command sent by a VScript.",
			" * @param {string} command Name of the command to perform.",
			" * @param {string[]} args List of string arguments the command can use.",
			" */",
			"function ParseCommand(command, args)",
			"{",
			"\tswitch(command)",
			"\t{",
			"\t\tcase \"\":",
			"\t\t",
			"\t\tbreak;",
			"\t}",
			"}",
			"",
			"/**",
			" * Code to run when this JavaScript entity is executed and loaded.",
			" */",
			"(function()",
			"{",
			"\t",
			"})();",
			""
		]
	}
}